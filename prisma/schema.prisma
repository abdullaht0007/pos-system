// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  passwordHash String
  token        String?  @unique
  tokenExpiry  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  apiLogs ApiLog[]

  @@map("users")
}

model ApiLog {
  id          String   @id @default(cuid())
  userId      String?
  username    String?
  method      String   // GET, POST, PUT, DELETE
  path        String   // /api/products, /api/sales, etc.
  function    String   // createProduct, updateSale, etc.
  statusCode  Int      // 200, 400, 500, etc.
  requestBody String?  // JSON string of request body
  responseBody String? // JSON string of response body
  userAgent   String?
  ipAddress   String?
  duration    Int?     // Response time in milliseconds
  error       String?  // Error message if any
  createdAt   DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("api_logs")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  sku         String   @unique
  priceCents  Int
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  inventoryItems InventoryItem[]
  saleItems      SaleItem[]

  @@map("products")
}

model InventoryItem {
  id        String   @id @default(cuid())
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory_items")
}

model Sale {
  id              String   @id @default(cuid())
  receiptNumber   String   @unique
  subtotalCents   Int
  discountPercent Int      @default(0)
  discountCents   Int      @default(0)
  totalCents      Int
  paymentMethod   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  items SaleItem[]

  @@map("sales")
}

model SaleItem {
  id             String @id @default(cuid())
  saleId         String
  productId      String
  quantity       Int
  unitPriceCents Int
  lineTotalCents Int

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("sale_items")
}
